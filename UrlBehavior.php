<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 10/28/2017
 * Time: 5:17 PM
 */

namespace quangthinh\yii\route;


use quangthinh\yii\route\models\Route;
use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\db\ActiveRecord;

/**
 * Class UrlBehavior
 * @package quangthinh\yii\route
 *
 * Behavior kết nối với Route model tương ứng để sinh row tương ứng với của url trong db
 */
class UrlBehavior extends Behavior
{
    public $routeClass = 'quangthinh\yii\route\models\Route';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (!is_subclass_of($this->routeClass, Route::className())) {
            throw new InvalidConfigException('routeClass must be instance of Route model');
        }
    }

    public function events()
    {
        return [
            ActiveRecord::EVENT_AFTER_REFRESH => 'internalRefresh',
            ActiveRecord::EVENT_AFTER_INSERT => 'internalInsert',
            ActiveRecord::EVENT_AFTER_UPDATE => 'internalUpdate',
            ActiveRecord::EVENT_AFTER_DELETE => 'internalDelete',
        ];
    }

    public function internalRefresh()
    {
        $this->reloadData();
    }

    /**
     * Load data vào active record
     *
     * @param null|ActiveRecord $model
     */
    protected function reloadData($model = null)
    {
        if (!$model) {

            /**
             * @var $routeClass Route
             */
            $routeClass = $this->routeClass;

            /**
             * @var $owner ActiveRecord
             */
            $owner = $this->owner;

            /**
             * @var $model Route
             */
            $model = $routeClass::loadRoute($owner, $this->attributeName);
        }

        $this->setAttributeValue($model->full_url);
    }

    public function internalInsert()
    {
        /**
         * @var $routeClass Route
         */
        $routeClass = $this->routeClass;

        /**
         * @var $owner ActiveRecord
         */
        $owner = $this->owner;

        /**
         * @var $model Route
         */
        $model = $routeClass::loadRoute($owner, $this->attributeName);
        $model->full_url = $this->getAttributeValue();
        $model->save();

        $this->reloadData($model);
    }

    public function internalUpdate()
    {
        /**
         * @var $routeClass Route
         */
        $routeClass = $this->routeClass;

        /**
         * @var $owner ActiveRecord
         */
        $owner = $this->owner;

        /**
         * @var $model Route
         */
        $model = $routeClass::loadRoute($owner, $this->attributeName);
        $model->full_url = $this->getAttributeValue();
        $model->save();

        $this->reloadData($model);
    }

    public function internalDelete()
    {
        /**
         * @var $routeClass Route
         */
        $routeClass = $this->routeClass;

        /**
         * @var $owner Route
         */
        $owner = $this->owner;
        $routeClass::removeRoute($owner);
    }

    // virtual attribute
    public $attributeName = 'slug';

    private $_attributeValue = null;

    public function __get($name)
    {
        if ($name === $this->attributeName) {
            return $this->getAttributeValue();
        }

        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    public function __set($name, $value)
    {
        if ($name === $this->attributeName) {
            $this->setAttributeValue($value);
            return;
        }

        parent::__set($name, $value); // TODO: Change the autogenerated stub
    }

    private $attributeLoaded = false;

    private function getAttributeValue()
    {
        // loaded ?
        if ($this->attributeLoaded) {
            return $this->_attributeValue;
        }

        $this->attributeLoaded = true;
        // try find db
        $this->reloadData();
        return $this->_attributeValue;
    }

    private $_oldAttributeValue;
    private function setAttributeValue($value)
    {
        $this->_oldAttributeValue = $this->getAttributeValue();
        $this->_attributeValue = $value;
    }

    public function canGetProperty($name, $checkVars = true)
    {
        if ($name === $this->attributeName) {
            return true;
        }

        return parent::canGetProperty($name, $checkVars); // TODO: Change the autogenerated stub
    }

    public function canSetProperty($name, $checkVars = true)
    {
        if ($name === $this->attributeName) {
            return true;
        }

        return parent::canSetProperty($name, $checkVars); // TODO: Change the autogenerated stub
    }
}