<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 10/28/2017
 * Time: 5:06 PM
 */

namespace quangthinh\yii\route\models;

use quangthinh\yii\common\behaviors\UuidBehavior;
use Ramsey\Uuid\Uuid;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\helpers\Json;
use yii\web\Request;

/**
 * Class Route
 * @package quangthinh\yii\route\models
 *
 * @property string $handle_class
 * @property string $full_url
 * @property string $object_id
 * @property string $route_name
 * @property string $route_params
 * @property string $priority
 */
class Route extends ActiveRecord
{
    public static $defaultRoute = '';
    public static $defaultParams;

    public function behaviors()
    {
        return [
            UuidBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%route}}';
    }

    public function beforeSave($insert)
    {
        $this->handle_class = self::className(); // class xử lý liên quan tới url, mỗi object khác nhau cần có 1 handle class tương ứng để sinh url

        $routeClass = self::className();
        $this->route_name = $routeClass::$defaultRoute;

        // safe default url
        if (! $this->full_url) {
            // uuid link
            $this->full_url = Uuid::uuid4()->toString() . '.html';
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['handle_class', 'route_name', 'full_url'], 'string'],
            [['full_url'], 'unique'],
            [['params', 'object_id'], 'safe'],
            [['priority'], 'integer', 'min' => 0],
            [['priority'], 'default', 'value' => 10],
        ];
    }

    public function setParams($value)
    {
        if (is_array($value)) {
            ksort($value);
            $this->route_params = Json::encode($value, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_FORCE_OBJECT);
            return;
        }

        $this->route_params = '{}';
    }

    public function getParams()
    {
        return Json::decode($this->route_params, true);
    }

    // XỬ LÝ CÁC THAO TÁC LIÊN QUAN

    /**
     * Đường dẫn tương ứng với activerecord(id) phục vụ cho createUrl()
     * Xử lý kêt hợp vơi tryCreate để sinh ra url tương ưng
     * @return string
     */
    public function getUrl($params = [])
    {

        // remove param trong path
        unset($params['id']);

        $hash = '';
        if (isset($params['#'])) {
            $hash = $params['#'];
            unset($params['#']);
        }

        $query = '';
        if (!empty($params)) {
            $query = '?' . http_build_query($params);
        }

        $url = $this->full_url . $query . $hash;
        return $url;
    }

    // hiện tại lưu trực tiếp vào db
    public function setSlug($value)
    {
        $this->full_url = $value;
    }

    public function getSlug()
    {
        return $this->full_url;
    }

    public static function loadRoute(ActiveRecord $owner, $attribute = 'slug')
    {
        /**
         * @var $routeClass Route
         */
        $routeClass = self::className();

        // find

        $model = $routeClass::find()
            ->where([
                'handle_class' => $routeClass,
                'object_id' => $owner->primaryKey,
            ])->orderBy([
                'priority' => SORT_ASC,
            ])->limit(1)->one();

        if ($model) {
            return $model;
        }

        // tạo và sử dụng như là 1 NULL object
        /**
         * @var $model Route
         */
        $model = new $routeClass;
//        $model->full_url = $owner->$attribute;
        $model->object_id = $owner->primaryKey;
        $model->setParams(['id' => $model->object_id]);

        return $model;
    }

    public static function removeRoute(ActiveRecord $model)
    {
        /**
         * @var $routeClass Route
         */
        $routeClass = self::className();
        $routeClass::deleteAll([
            'handle_class' => $routeClass,
            'object_id' => $model->primaryKey,
        ]);
    }

    /**
     * Parse request as instance of Route
     *
     * @param Request $request
     * @return Route|null
     */
    public static function parse($request)
    {
        // simple parse
        $path = $request->pathInfo;

        /**
         * @var $routeClass Route
         */
        $routeClass = self::className();

        /**
         * @var $data Route|null
         */
        $data = $routeClass::find()
            ->where([
                'full_url' => $path,
            ])->orderBy([
                'priority' => SORT_ASC,
                'full_url' => SORT_ASC,
            ])->limit(1)->one();

        return $data;
    }

    public static function tryCreate($route, $params = [])
    {
        /**
         * @var $routeClass Route
         */
        $routeClass = self::className();
        if ($routeClass::$defaultRoute === $route) {
            // hardcode with id param
            if (isset($params['id'])) {
                $data = $routeClass::find()
                    ->where([
                        'handle_class' => $routeClass,
                        'route_name' => $route,
                        'route_params' => Json::encode([
                            'id' => $params['id'],
                        ]),
                    ])->orderBy([
                        'priority' => SORT_ASC,
                    ])->limit(1)->one();

                return $data;
            }
        }

        return null;
    }

    public function getRouteArray()
    {
        return [$this->route_name] + $this->getParams();
    }
}